{"version":3,"file":"static/js/371.a94b01ce.chunk.js","mappings":"qNACA,EAA8B,kCAA9B,EAAwE,4BAAxE,EAAgH,gC,6BCOnGA,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,aAEvBC,ECIK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,EDnBcQ,GAoBfC,EAAQ,WACZnB,EAAQ,IACRE,EAAU,KAGZ,OACE,kBAAMkB,UAAWC,EAAiBC,SAxBnB,SAAAC,GACfC,QAAQC,IAAIF,GACZA,EAAEG,iBACsBrB,EAASsB,MAAK,SAAAC,GAAO,OAAIA,EAAQ7B,OAASA,KAEhE8B,MAAM9B,EAAO,4BAGfI,EACE2B,EAAAA,EAAAA,WAA8B,CAE5B/B,KAAAA,EACAE,OAAAA,KAGJkB,MASA,WACE,qCAEE,kBACEY,KAAK,OACLhC,KAAK,OACLiC,MAAOjC,EACPqB,UAAWC,EACXY,SAAU,SAAAV,GAAC,OAAIvB,EAAQuB,EAAEW,cAAcF,QACvCtB,GAAIF,EACJ2B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,uCAEE,kBACEN,KAAK,MACLhC,KAAK,SACLiC,MAAO/B,EACPmB,UAAWC,EACXY,SAAU,SAAAV,GAAC,OAAIrB,EAAUqB,EAAEW,cAAcF,QACzCG,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQN,KAAK,QAAQX,UAAWC,EAAhC,8B,oBEhCN,EA/Be,WACb,IAAMlB,GAAWC,EAAAA,EAAAA,MACXkC,GAAShC,EAAAA,EAAAA,KAAY,SAAAiC,GAAK,OAAIA,EAAMlC,SAASiC,UAEnD,OACE,4BACE,SAACE,EAAA,EAAD,CACE9B,GAAG,kBACH+B,MAAM,SACNC,aAAa,OACbC,WAAW,wBACXZ,KAAK,OACLa,QAAQ,WACRZ,MAAOM,EACPL,SAAU,SAAAV,GAAC,OAAIpB,GAAS0C,EAAAA,EAAAA,IAAatB,EAAEW,cAAcF,cCnB7D,EAA+B,kCAA/B,EAA0E,4BAA1E,EAAiH,8BAAjH,EAA2J,+BAA3J,EAAqM,8BCItL,SAASc,IACtB,IAAM3C,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,qBACvB+B,GAAShC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,WAErBwC,EAAmB1C,EAASiC,QAAO,qBAAGvC,KAAgBiD,SAASV,MACrEd,QAAQC,IAAIa,GAIZ,OACE,eAAIlB,UAAWC,EAAf,SACG0B,EAAiBE,KAAI,gBAAGvC,EAAH,EAAGA,GAAIX,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACpB,gBAAamB,UAAWC,EAAxB,WACE,iBAAMD,UAAWC,KACjB,eAAGD,UAAWC,EAAd,UACGtB,EADH,KACWE,MAEX,mBAAQmB,UAAWC,EAAe6B,QAAS,kBAV3B,SAAAxC,GAAE,OAAIP,EAAS2B,EAAAA,GAAAA,cAAiCpB,IAUfyC,CAAgBzC,IAAjE,sBALOA,QCjBjB,MAA4B,6BCCb,SAAS0C,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,gBAAKjC,UAAWC,EAAhB,SAAgCgC,I,cCM1B,SAASC,IACtB,IAAMnD,GAAWC,EAAAA,EAAAA,MACXmD,GAAoBjD,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,YAOtC,OANAiB,QAAQC,IAAI8B,IAEZC,EAAAA,EAAAA,YAAU,WACRrD,EAAS2B,EAAAA,EAAAA,mBACR,CAAC3B,KAGF,SAACiD,EAAD,WACE,iBAAKhC,UAAU,YAAf,WACE,uCACA,iBAAKA,UAAU,OAAf,WACE,4BACE,SAACvB,EAAD,KACA,SAAC,EAAD,QAEF,4BACE,qCACC0D,IAAqB,wCACtB,SAACT,EAAD","sources":["webpack://react-homework-template/./src/components/contactForm/contactsForm.module.css?9ba2","components/contactForm/contactForm.jsx","../node_modules/nanoid/index.browser.js","components/filter/filter.jsx","webpack://react-homework-template/./src/components/contactList/contactList.module.css?e2f8","components/contactList/contactList.jsx","webpack://react-homework-template/./src/components/container/container.module.css?7c69","components/container/container.js","views/ContactsView/contactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contactsForm_contactForm__XAAtb\",\"input\":\"contactsForm_input__nu5P6\",\"submitBtn\":\"contactsForm_submitBtn__zzpC0\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport css from './contactsForm.module.css';\nimport { Selectors } from 'redux/contacts';\nimport contactsOperations from 'redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(Selectors.getContacts);\n\n  const loginInputId = nanoid();\n\n  const onSubmit = e => {\n    console.log(e);\n    e.preventDefault();\n    const includedСontact = contacts.find(contact => contact.name === name);\n    if (includedСontact) {\n      alert(name + 'is already in contacts.');\n      return;\n    }\n    dispatch(\n      contactsOperations.addContact({\n        //id: nanoid(),\n        name,\n        number,\n      })\n    );\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={onSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          className={css.input}\n          onChange={e => setName(e.currentTarget.value)}\n          id={loginInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          className={css.input}\n          onChange={e => setNumber(e.currentTarget.value)}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"input\" className={css.submitBtn}>\n        Add contacts\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { changeFilter } from '../../redux/contacts/contactsActions';\nimport { TextField } from '@mui/material';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.filter);\n\n  return (\n    <label>\n      <TextField\n        id=\"outlined-search\"\n        label=\"Filter\"\n        defaultValue=\"Name\"\n        helperText=\"Find contacts by name\"\n        type=\"text\"\n        variant=\"standard\"\n        value={filter}\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n      />\n      {/* <input\n        type=\"text\"\n        value={filter}\n        className={css.input}\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n      /> */}\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"contactList_contactsList__Oa9oy\",\"marker\":\"contactList_marker__uvt4B\",\"listItem\":\"contactList_listItem__ikUhh\",\"removeBtn\":\"contactList_removeBtn__i97gB\",\"itemName\":\"contactList_itemName__qEoWC\"};","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport css from './contactList.module.css';\nimport { contactsOperations, Selectors } from 'redux/contacts';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(Selectors.getFilteredContacts);\n  const filter = useSelector(Selectors.getFilter);\n\n  const filteredContacts = contacts.filter(({ name }) => name.includes(filter));\n  console.log(filter);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <ul className={css.contactsList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.listItem}>\n          <span className={css.marker}></span>\n          <p className={css.itemName}>\n            {name}: {number}\n          </p>\n          <button className={css.removeBtn} onClick={() => onDeleteContact(id)}>\n            remove\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container_container__srhc2\"};","import css from './container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={css.container}>{children}</div>;\n}\n","import { ContactForm } from 'components/contactForm/contactForm';\nimport Filter from 'components/filter/filter';\nimport ContactList from 'components/contactList/contactList';\nimport Container from 'components/container/container';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Selectors from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport contactsOperations from 'redux/contacts/contactsOperations';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(Selectors.getLoading);\n  console.log(isLoadingContacts);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <div className=\"container\">\n        <h1>Phonebook</h1>\n        <div className=\"wrap\">\n          <div>\n            <ContactForm />\n            <Filter />\n          </div>\n          <div>\n            <h2>Contacts</h2>\n            {isLoadingContacts && <h1>Loading...</h1>}\n            <ContactList />\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n}\n"],"names":["ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","Selectors","loginInputId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","reset","className","css","onSubmit","e","console","log","preventDefault","find","contact","alert","contactsOperations","type","value","onChange","currentTarget","pattern","title","required","filter","state","TextField","label","defaultValue","helperText","variant","changeFilter","ContactList","filteredContacts","includes","map","onClick","onDeleteContact","Container","children","ContactsView","isLoadingContacts","useEffect"],"sourceRoot":""}